type Artist {
    name: String!
    image: String
    spotifyId: String!
}

input ArtistInput {
    name: String!
    image: String
    spotifyId: String!
}

type Vote {
    issuer: User!
    comment: String!
}

type Track {
    id: ID!
    spotifyId: String!
    name: String!
    albumName: String!
    spotifyAlbumId: String
    image: String
    duration: Float!
    artists: [Artist!]!
    votes: [Vote!]!
    submittedBy: User!
}

input TrackInput {
    spotifyId: String!
    name: String!
    albumName: String!
    spotifyAlbumId: String
    image: String
    duration: Float!
    artists: [ArtistInput!]!
}

type User {
    id: ID!
    name: String!
    picture: String
}

type Playlist {
    id: ID!
    name: String!
    creator: User!
    currentTrack: Track
    tracks: [Track]!
}

scalar JsonNode

type Query {
    me: User!
    search(term: String): JsonNode
    playlists(page: Int, size: Int): [Playlist]
    playlist(id: ID): Playlist
}

type Mutation {
    createPlaylist(name: String!): Playlist
    addTrack(playlistID: ID!, track: TrackInput!): Playlist
    voteForTrack(playlistID: ID!, trackID: ID!, comment: String): Playlist
}